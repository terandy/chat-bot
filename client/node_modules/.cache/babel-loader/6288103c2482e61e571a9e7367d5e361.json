{"ast":null,"code":"var _jsxFileName = \"/Users/teresalacroix/Dev/chat-bot/client/src/components/nav/Nav.tsx\";\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { NAV_HEIGHT, CONTENT_WIDTH } from '../../data';\nimport { useSelector, useDispatch } from 'react-redux';\nconst UpperNav = styled.div`\n  z-index: 1000;\n  box-sizing: border-box;\n  background-color: white;\n  border-bottom: 2px solid lightgrey;\n  height: ${NAV_HEIGHT};\n  width: 100%;\n  position: fixed;\n  top: ${props => props.topNavDisplay ? '0' : '-' + NAV_HEIGHT};\n  transition: top 0.4s ease-in-out;\n`;\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n  max-width: ${CONTENT_WIDTH}; /*For margins*/\n  margin: auto; /*For margins*/\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  box-sizing: border-box;\n  a {\n    margin-right: 10px;\n  }\n`;\n\nconst Nav = () => {\n  const dispatch = useDispatch();\n  let topNavDisplay = useSelector(state => state.topNavDisplay);\n  let innercontainer = useSelector(state => state.innercontainerRef);\n  let topNavDisplayRef = useRef();\n\n  const toggleNav = content => {\n    dispatch({\n      type: 'toggle-topNavDisplay',\n      content: content\n    });\n  };\n\n  useEffect(() => {\n    var scrollPos = 0;\n\n    window.onscroll = () => {\n      let position = document.body.getBoundingClientRect().top;\n\n      if (position > scrollPos) {\n        if (!topNavDisplayRef.current) {\n          console.log('position', position);\n          console.log('height', innercontainerRef.current.clientHeight);\n          toggleNav(true);\n        }\n      } else {\n        if (topNavDisplayRef.current) {\n          console.log('position', position);\n          console.log('height', innercontainerRef.current.clientHeight);\n          toggleNav(false);\n        }\n      }\n\n      scrollPos = document.body.getBoundingClientRect().top;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(UpperNav, {\n    topNavDisplay: topNavDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Home\"), /*#__PURE__*/React.createElement(Link, {\n    to: \"/messenger/1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Messages\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"nav Bar\")));\n};\n\nexport default Nav;","map":{"version":3,"sources":["/Users/teresalacroix/Dev/chat-bot/client/src/components/nav/Nav.tsx"],"names":["React","useEffect","useRef","styled","Link","NAV_HEIGHT","CONTENT_WIDTH","useSelector","useDispatch","UpperNav","div","props","topNavDisplay","Container","Nav","dispatch","state","innercontainer","innercontainerRef","topNavDisplayRef","toggleNav","content","type","scrollPos","window","onscroll","position","document","body","getBoundingClientRect","top","current","console","log","clientHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAA0D,OAA1D;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,YAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAMA,MAAMC,QAAQ,GAAGN,MAAM,CAACO,GAAiB;;;;;YAK7BL,UAAW;;;SAGdM,KAAK,IAAKA,KAAK,CAACC,aAAN,GAAsB,GAAtB,GAA4B,MAAMP,UAAY;;CARjE;AAYA,MAAMQ,SAAS,GAAGV,MAAM,CAACO,GAAI;;;eAGdJ,aAAc;;;;;;;;;CAH7B;;AAiBA,MAAMQ,GAAoB,GAAG,MAAM;AACjC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAII,aAAa,GAAGL,WAAW,CAAES,KAAD,IAAsBA,KAAK,CAACJ,aAA7B,CAA/B;AACA,MAAIK,cAAc,GAAGV,WAAW,CAC7BS,KAAD,IAAsBA,KAAK,CAACE,iBADE,CAAhC;AAGA,MAAIC,gBAAgB,GAAGjB,MAAM,EAA7B;;AACA,QAAMkB,SAAS,GAAIC,OAAD,IAAsB;AACtCN,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAE,sBAAR;AAAgCD,MAAAA,OAAO,EAAEA;AAAzC,KAAD,CAAR;AACD,GAFD;;AAIApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,SAAS,GAAG,CAAhB;;AACAC,IAAAA,MAAM,CAACC,QAAP,GAAkB,MAAM;AACtB,UAAIC,QAAQ,GAAGC,QAAQ,CAACC,IAAT,CAAcC,qBAAd,GAAsCC,GAArD;;AACA,UAAIJ,QAAQ,GAAGH,SAAf,EAA0B;AACxB,YAAI,CAACJ,gBAAgB,CAACY,OAAtB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBP,QAAxB;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBf,iBAAiB,CAACa,OAAlB,CAA0BG,YAAhD;AACAd,UAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,OAND,MAMO;AACL,YAAID,gBAAgB,CAACY,OAArB,EAA8B;AAC5BC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBP,QAAxB;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBf,iBAAiB,CAACa,OAAlB,CAA0BG,YAAhD;AACAd,UAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF;;AACDG,MAAAA,SAAS,GAAGI,QAAQ,CAACC,IAAT,CAAcC,qBAAd,GAAsCC,GAAlD;AACD,KAhBD;AAiBD,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,sBACE,oBAAC,QAAD;AAAU,IAAA,aAAa,EAAElB,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CADF,CADF;AAWD,CA3CD;;AA6CA,eAAeE,GAAf","sourcesContent":["import React, { useEffect, useRef, useLayoutEffect } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { NAV_HEIGHT, CONTENT_WIDTH } from '../../data';\nimport { useSelector, useDispatch } from 'react-redux';\n\ninterface Props {}\ninterface StyledProps {\n  topNavDisplay: boolean;\n}\nconst UpperNav = styled.div<StyledProps>`\n  z-index: 1000;\n  box-sizing: border-box;\n  background-color: white;\n  border-bottom: 2px solid lightgrey;\n  height: ${NAV_HEIGHT};\n  width: 100%;\n  position: fixed;\n  top: ${props => (props.topNavDisplay ? '0' : '-' + NAV_HEIGHT)};\n  transition: top 0.4s ease-in-out;\n`;\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n  max-width: ${CONTENT_WIDTH}; /*For margins*/\n  margin: auto; /*For margins*/\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  box-sizing: border-box;\n  a {\n    margin-right: 10px;\n  }\n`;\ninterface RootState {\n  topNavDisplay: boolean;\n  innercontainerRef: HTMLDivElement;\n}\nconst Nav: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n  let topNavDisplay = useSelector((state: RootState) => state.topNavDisplay);\n  let innercontainer = useSelector(\n    (state: RootState) => state.innercontainerRef\n  );\n  let topNavDisplayRef = useRef<boolean>();\n  const toggleNav = (content: boolean) => {\n    dispatch({ type: 'toggle-topNavDisplay', content: content });\n  };\n\n  useEffect(() => {\n    var scrollPos = 0;\n    window.onscroll = () => {\n      let position = document.body.getBoundingClientRect().top;\n      if (position > scrollPos) {\n        if (!topNavDisplayRef.current) {\n          console.log('position', position);\n          console.log('height', innercontainerRef.current.clientHeight);\n          toggleNav(true);\n        }\n      } else {\n        if (topNavDisplayRef.current) {\n          console.log('position', position);\n          console.log('height', innercontainerRef.current.clientHeight);\n          toggleNav(false);\n        }\n      }\n      scrollPos = document.body.getBoundingClientRect().top;\n    };\n  }, []);\n\n  return (\n    <UpperNav topNavDisplay={topNavDisplay}>\n      <Container>\n        <div>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/messenger/1\">Messages</Link>\n        </div>\n        <div>nav Bar</div>\n      </Container>\n    </UpperNav>\n  );\n};\n\nexport default Nav;\n"]},"metadata":{},"sourceType":"module"}