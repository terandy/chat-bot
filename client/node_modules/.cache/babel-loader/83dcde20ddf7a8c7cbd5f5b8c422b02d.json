{"ast":null,"code":"var _jsxFileName = \"/Users/teresalacroix/Dev/chat-bot/client/src/components/nav/Nav.tsx\";\nimport React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router';\nimport { NAV_HEIGHT, CONTENT_WIDTH } from '../../data';\nimport { useSelector, useDispatch } from 'react-redux';\nconst UpperNav = styled.div`\n  box-sizing: border-box;\n  border: red solid 1px;\n  height: ${NAV_HEIGHT};\n  width: 100%;\n  position: fixed;\n  top: ${props => props.topNavDisplay ? '0' : '-' + NAV_HEIGHT};\n  transition: top 0.4s ease-in-out;\n`;\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n  max-width: ${CONTENT_WIDTH}; /*For margins*/\n  margin: auto; /*For margins*/\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: green solid 1px;\n  box-sizing: border-box;\n`;\n\nconst Nav = () => {\n  const dispatch = useDispatch();\n  let topNavDisplay = useSelector(state => state.topNavDisplay);\n  let topNavDisplayRef = useRef();\n  topNavDisplayRef.current = topNavDisplay;\n\n  const toggleNav = content => {\n    dispatch({\n      type: 'toggle-topNavDisplay',\n      content: content\n    });\n  };\n\n  useEffect(() => {\n    var scrollPos = 0;\n\n    window.onscroll = () => {\n      let position = document.body.getBoundingClientRect().top;\n\n      if (position > scrollPos) {\n        if (topNavDisplayRef.current === false) {\n          toggleNav(true);\n        }\n      } else {\n        if (topNavDisplayRef.current === true) {\n          toggleNav(false);\n        }\n      }\n\n      scrollPos = document.body.getBoundingClientRect().top;\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(UpperNav, {\n    topNavDisplay: topNavDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"messenger/1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"nav Bar\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"nav Bar\")));\n};\n\nexport default Nav;","map":{"version":3,"sources":["/Users/teresalacroix/Dev/chat-bot/client/src/components/nav/Nav.tsx"],"names":["React","useEffect","useRef","styled","Link","NAV_HEIGHT","CONTENT_WIDTH","useSelector","useDispatch","UpperNav","div","props","topNavDisplay","Container","Nav","dispatch","state","topNavDisplayRef","current","toggleNav","content","type","scrollPos","window","onscroll","position","document","body","getBoundingClientRect","top"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,YAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAMA,MAAMC,QAAQ,GAAGN,MAAM,CAACO,GAAiB;;;YAG7BL,UAAW;;;SAGdM,KAAK,IAAKA,KAAK,CAACC,aAAN,GAAsB,GAAtB,GAA4B,MAAMP,UAAY;;CANjE;AAUA,MAAMQ,SAAS,GAAGV,MAAM,CAACO,GAAI;;;eAGdJ,aAAc;;;;;;;CAH7B;;AAcA,MAAMQ,GAAoB,GAAG,MAAM;AACjC,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAII,aAAa,GAAGL,WAAW,CAAES,KAAD,IAAsBA,KAAK,CAACJ,aAA7B,CAA/B;AACA,MAAIK,gBAAgB,GAAGf,MAAM,EAA7B;AACAe,EAAAA,gBAAgB,CAACC,OAAjB,GAA2BN,aAA3B;;AACA,QAAMO,SAAS,GAAIC,OAAD,IAAsB;AACtCL,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE,sBAAR;AAAgCD,MAAAA,OAAO,EAAEA;AAAzC,KAAD,CAAR;AACD,GAFD;;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,SAAS,GAAG,CAAhB;;AACAC,IAAAA,MAAM,CAACC,QAAP,GAAkB,MAAM;AACtB,UAAIC,QAAQ,GAAGC,QAAQ,CAACC,IAAT,CAAcC,qBAAd,GAAsCC,GAArD;;AACA,UAAIJ,QAAQ,GAAGH,SAAf,EAA0B;AACxB,YAAIL,gBAAgB,CAACC,OAAjB,KAA6B,KAAjC,EAAwC;AACtCC,UAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,OAJD,MAIO;AACL,YAAIF,gBAAgB,CAACC,OAAjB,KAA6B,IAAjC,EAAuC;AACrCC,UAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF;;AACDG,MAAAA,SAAS,GAAGI,QAAQ,CAACC,IAAT,CAAcC,qBAAd,GAAsCC,GAAlD;AACD,KAZD;AAaD,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE,oBAAC,QAAD;AAAU,IAAA,aAAa,EAAEjB,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,aAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CADF,CADF;AAUD,CApCD;;AAsCA,eAAeE,GAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router';\nimport { NAV_HEIGHT, CONTENT_WIDTH } from '../../data';\nimport { useSelector, useDispatch } from 'react-redux';\n\ninterface Props {}\ninterface StyledProps {\n  topNavDisplay: boolean;\n}\nconst UpperNav = styled.div<StyledProps>`\n  box-sizing: border-box;\n  border: red solid 1px;\n  height: ${NAV_HEIGHT};\n  width: 100%;\n  position: fixed;\n  top: ${props => (props.topNavDisplay ? '0' : '-' + NAV_HEIGHT)};\n  transition: top 0.4s ease-in-out;\n`;\n\nconst Container = styled.div`\n  height: 100%;\n  width: 100%;\n  max-width: ${CONTENT_WIDTH}; /*For margins*/\n  margin: auto; /*For margins*/\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: green solid 1px;\n  box-sizing: border-box;\n`;\ninterface RootState {\n  topNavDisplay: boolean;\n}\nconst Nav: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n  let topNavDisplay = useSelector((state: RootState) => state.topNavDisplay);\n  let topNavDisplayRef = useRef<boolean>();\n  topNavDisplayRef.current = topNavDisplay;\n  const toggleNav = (content: boolean) => {\n    dispatch({ type: 'toggle-topNavDisplay', content: content });\n  };\n\n  useEffect(() => {\n    var scrollPos = 0;\n    window.onscroll = () => {\n      let position = document.body.getBoundingClientRect().top;\n      if (position > scrollPos) {\n        if (topNavDisplayRef.current === false) {\n          toggleNav(true);\n        }\n      } else {\n        if (topNavDisplayRef.current === true) {\n          toggleNav(false);\n        }\n      }\n      scrollPos = document.body.getBoundingClientRect().top;\n    };\n  }, []);\n\n  return (\n    <UpperNav topNavDisplay={topNavDisplay}>\n      <Container>\n        <div>\n          <Link to=\"messenger/1\">nav Bar</Link>\n        </div>\n        <div>nav Bar</div>\n      </Container>\n    </UpperNav>\n  );\n};\n\nexport default Nav;\n"]},"metadata":{},"sourceType":"module"}